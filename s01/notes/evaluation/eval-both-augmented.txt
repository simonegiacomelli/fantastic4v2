!cd fantastic4v2/s01 && python generate_synth_dataset_v3.py --name training   --count 1000
!cd fantastic4v2/s01 && python generate_synth_dataset_v3.py --name validation --count 500

[05/29 11:03:13 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=3, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=8, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[05/29 11:03:14 d2.data.datasets.coco]: Loaded 1000 images in COCO format from /content/fantastic4v2/datasets/f4/synth_dataset_training/output/coco_annotations.json
[05/29 11:03:14 d2.data.build]: Removed 0 images with no usable annotations. 1000 images left.
[05/29 11:03:14 d2.data.build]: Distribution of instances among all 2 categories:
|  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|
|  arsenal1  | 525          | emirates1  | 475          |
|            |              |            |              |
|   total    | 1000         |            |              |
[05/29 11:03:14 d2.data.common]: Serializing 1000 elements to byte tensors and concatenating them all ...
[05/29 11:03:14 d2.data.common]: Serialized dataset takes 0.36 MiB
[05/29 11:03:14 d2.data.detection_utils]: TransformGens used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[05/29 11:03:14 d2.data.build]: Using training sampler TrainingSampler
'roi_heads.box_predictor.cls_score.weight' has shape (81, 1024) in the checkpoint but (3, 1024) in the model! Skipped.
'roi_heads.box_predictor.cls_score.bias' has shape (81,) in the checkpoint but (3,) in the model! Skipped.
'roi_heads.box_predictor.bbox_pred.weight' has shape (320, 1024) in the checkpoint but (8, 1024) in the model! Skipped.
'roi_heads.box_predictor.bbox_pred.bias' has shape (320,) in the checkpoint but (8,) in the model! Skipped.
'roi_heads.mask_head.predictor.weight' has shape (80, 256, 1, 1) in the checkpoint but (2, 256, 1, 1) in the model! Skipped.
'roi_heads.mask_head.predictor.bias' has shape (80,) in the checkpoint but (2,) in the model! Skipped.
[05/29 11:03:15 d2.engine.train_loop]: Starting training from iteration 0
[05/29 11:03:22 d2.utils.events]:  eta: 0:01:29  iter: 19  total_loss: 1.821  loss_cls: 0.654  loss_box_reg: 0.487  loss_mask: 0.661  loss_rpn_cls: 0.012  loss_rpn_loc: 0.005  time: 0.3151  data_time: 0.0123  lr: 0.000400  max_mem: 1861M
[05/29 11:03:28 d2.utils.events]:  eta: 0:01:23  iter: 39  total_loss: 1.255  loss_cls: 0.277  loss_box_reg: 0.608  loss_mask: 0.287  loss_rpn_cls: 0.005  loss_rpn_loc: 0.004  time: 0.3206  data_time: 0.0045  lr: 0.000799  max_mem: 1861M
[05/29 11:03:35 d2.utils.events]:  eta: 0:01:18  iter: 59  total_loss: 0.800  loss_cls: 0.127  loss_box_reg: 0.439  loss_mask: 0.135  loss_rpn_cls: 0.000  loss_rpn_loc: 0.004  time: 0.3221  data_time: 0.0043  lr: 0.001199  max_mem: 1861M
[05/29 11:03:41 d2.utils.events]:  eta: 0:01:12  iter: 79  total_loss: 0.530  loss_cls: 0.055  loss_box_reg: 0.329  loss_mask: 0.122  loss_rpn_cls: 0.000  loss_rpn_loc: 0.005  time: 0.3236  data_time: 0.0051  lr: 0.001598  max_mem: 1861M
[05/29 11:03:48 d2.utils.events]:  eta: 0:01:05  iter: 99  total_loss: 0.477  loss_cls: 0.075  loss_box_reg: 0.244  loss_mask: 0.153  loss_rpn_cls: 0.000  loss_rpn_loc: 0.004  time: 0.3250  data_time: 0.0048  lr: 0.001998  max_mem: 1861M
[05/29 11:03:54 d2.utils.events]:  eta: 0:00:58  iter: 119  total_loss: 0.503  loss_cls: 0.067  loss_box_reg: 0.287  loss_mask: 0.119  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3229  data_time: 0.0052  lr: 0.002398  max_mem: 1861M
[05/29 11:04:01 d2.utils.events]:  eta: 0:00:52  iter: 139  total_loss: 0.403  loss_cls: 0.061  loss_box_reg: 0.219  loss_mask: 0.101  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3258  data_time: 0.0054  lr: 0.002797  max_mem: 1861M
[05/29 11:04:08 d2.utils.events]:  eta: 0:00:46  iter: 159  total_loss: 0.402  loss_cls: 0.062  loss_box_reg: 0.217  loss_mask: 0.099  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3258  data_time: 0.0054  lr: 0.003197  max_mem: 1861M
[05/29 11:04:15 d2.utils.events]:  eta: 0:00:39  iter: 179  total_loss: 0.374  loss_cls: 0.054  loss_box_reg: 0.210  loss_mask: 0.101  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3274  data_time: 0.0049  lr: 0.003596  max_mem: 1861M
[05/29 11:04:21 d2.utils.events]:  eta: 0:00:33  iter: 199  total_loss: 0.521  loss_cls: 0.065  loss_box_reg: 0.317  loss_mask: 0.106  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3279  data_time: 0.0047  lr: 0.003996  max_mem: 1861M
[05/29 11:04:28 d2.utils.events]:  eta: 0:00:26  iter: 219  total_loss: 0.424  loss_cls: 0.053  loss_box_reg: 0.254  loss_mask: 0.117  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3300  data_time: 0.0042  lr: 0.004396  max_mem: 1861M
[05/29 11:04:35 d2.utils.events]:  eta: 0:00:20  iter: 239  total_loss: 0.428  loss_cls: 0.055  loss_box_reg: 0.244  loss_mask: 0.109  loss_rpn_cls: 0.001  loss_rpn_loc: 0.002  time: 0.3296  data_time: 0.0043  lr: 0.004795  max_mem: 1861M
[05/29 11:04:42 d2.utils.events]:  eta: 0:00:13  iter: 259  total_loss: 0.428  loss_cls: 0.061  loss_box_reg: 0.252  loss_mask: 0.116  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3310  data_time: 0.0050  lr: 0.005195  max_mem: 1861M
[05/29 11:04:48 d2.utils.events]:  eta: 0:00:06  iter: 279  total_loss: 0.389  loss_cls: 0.059  loss_box_reg: 0.226  loss_mask: 0.086  loss_rpn_cls: 0.001  loss_rpn_loc: 0.003  time: 0.3313  data_time: 0.0048  lr: 0.005594  max_mem: 1861M
[05/29 11:04:56 d2.data.datasets.coco]: Loaded 500 images in COCO format from /content/fantastic4v2/datasets/f4/synth_dataset_validation/output/coco_annotations.json
[05/29 11:04:56 d2.data.build]: Distribution of instances among all 2 categories:
|  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|
|  arsenal1  | 249          | emirates1  | 251          |
|            |              |            |              |
|   total    | 500          |            |              |
[05/29 11:04:56 d2.data.common]: Serializing 500 elements to byte tensors and concatenating them all ...
[05/29 11:04:56 d2.data.common]: Serialized dataset takes 0.18 MiB
[05/29 11:04:56 d2.evaluation.evaluator]: Start inference on 500 images
[05/29 11:04:57 d2.evaluation.evaluator]: Inference done 11/500. 0.0821 s / img. ETA=0:00:43
[05/29 11:05:02 d2.evaluation.evaluator]: Inference done 69/500. 0.0817 s / img. ETA=0:00:37
[05/29 11:05:07 d2.evaluation.evaluator]: Inference done 127/500. 0.0818 s / img. ETA=0:00:32
[05/29 11:05:12 d2.evaluation.evaluator]: Inference done 185/500. 0.0819 s / img. ETA=0:00:27
[05/29 11:05:17 d2.evaluation.evaluator]: Inference done 243/500. 0.0820 s / img. ETA=0:00:22
[05/29 11:05:22 d2.evaluation.evaluator]: Inference done 300/500. 0.0824 s / img. ETA=0:00:17
[05/29 11:05:27 d2.evaluation.evaluator]: Inference done 358/500. 0.0824 s / img. ETA=0:00:12
[05/29 11:05:32 d2.evaluation.evaluator]: Inference done 416/500. 0.0824 s / img. ETA=0:00:07
[05/29 11:05:38 d2.evaluation.evaluator]: Inference done 474/500. 0.0824 s / img. ETA=0:00:02
[05/29 11:05:40 d2.evaluation.evaluator]: Total inference time: 0:00:43.176189 (0.087225 s / img per device, on 1 devices)
[05/29 11:05:40 d2.evaluation.evaluator]: Total inference pure compute time: 0:00:40 (0.082477 s / img per device, on 1 devices)
[05/29 11:05:40 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[05/29 11:05:40 d2.evaluation.coco_evaluation]: Saving results to /content/synth_val/coco_instances_results.json
[05/29 11:05:40 d2.evaluation.coco_evaluation]: Evaluating predictions ...
Loading and preparing results...
DONE (t=0.00s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=0.30s).
Accumulating evaluation results...
DONE (t=0.06s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.681
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.999
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.817
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.683
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.691
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.741
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.741
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.741
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.717
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.756
[05/29 11:05:40 d2.evaluation.coco_evaluation]: Evaluation results for bbox:
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 68.080 | 99.945 | 81.661 |  nan  | 68.269 | 69.056 |
[05/29 11:05:40 d2.evaluation.coco_evaluation]: Note that some metrics cannot be computed.
[05/29 11:05:40 d2.evaluation.coco_evaluation]: Per-category bbox AP:
| category   | AP     | category   | AP     |
|:-----------|:-------|:-----------|:-------|
| arsenal1   | 59.508 | emirates1  | 76.652 |
Loading and preparing results...
DONE (t=0.02s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *segm*
DONE (t=0.34s).
Accumulating evaluation results...
DONE (t=0.06s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.809
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.999
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.926
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.800
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.821
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.859
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.864
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.864
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.862
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.868
[05/29 11:05:41 d2.evaluation.coco_evaluation]: Evaluation results for segm:
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 80.907 | 99.945 | 92.568 |  nan  | 80.021 | 82.109 |
[05/29 11:05:41 d2.evaluation.coco_evaluation]: Note that some metrics cannot be computed.
[05/29 11:05:41 d2.evaluation.coco_evaluation]: Per-category segm AP:
| category   | AP     | category   | AP     |
|:-----------|:-------|:-----------|:-------|
| arsenal1   | 67.693 | emirates1  | 94.121 |
[05/29 11:05:41 d2.engine.defaults]: Evaluation results for synth_val in csv format:
[05/29 11:05:41 d2.evaluation.testing]: copypaste: Task: bbox
[05/29 11:05:41 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[05/29 11:05:41 d2.evaluation.testing]: copypaste: 68.0800,99.9452,81.6612,nan,68.2688,69.0563
[05/29 11:05:41 d2.evaluation.testing]: copypaste: Task: segm
[05/29 11:05:41 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[05/29 11:05:41 d2.evaluation.testing]: copypaste: 80.9071,99.9452,92.5679,nan,80.0211,82.1090
[05/29 11:05:41 d2.utils.events]:  eta: 0:00:00  iter: 299  total_loss: 0.426  loss_cls: 0.057  loss_box_reg: 0.264  loss_mask: 0.074  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3314  data_time: 0.0045  lr: 0.005994  max_mem: 1861M
[05/29 11:05:41 d2.engine.hooks]: Overall training speed: 297 iterations in 0:01:38 (0.3326 s / it)
[05/29 11:05:41 d2.engine.hooks]: Total training time: 0:02:24 (0:00:45 on hooks)