!cd fantastic4v2/s01 && python generate_synth_dataset_v3.py --name training   --count 1000
!cd fantastic4v2/s01 && python generate_synth_dataset_v3.py --name validation --count 500  --no-augmentation

[05/29 10:55:09 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=3, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=8, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[05/29 10:55:10 d2.data.datasets.coco]: Loaded 1000 images in COCO format from /content/fantastic4v2/datasets/f4/synth_dataset_training/output/coco_annotations.json
[05/29 10:55:10 d2.data.build]: Removed 0 images with no usable annotations. 1000 images left.
[05/29 10:55:10 d2.data.build]: Distribution of instances among all 2 categories:
|  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|
|  arsenal1  | 501          | emirates1  | 499          |
|            |              |            |              |
|   total    | 1000         |            |              |
[05/29 10:55:10 d2.data.common]: Serializing 1000 elements to byte tensors and concatenating them all ...
[05/29 10:55:10 d2.data.common]: Serialized dataset takes 0.36 MiB
[05/29 10:55:10 d2.data.detection_utils]: TransformGens used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[05/29 10:55:10 d2.data.build]: Using training sampler TrainingSampler
'roi_heads.box_predictor.cls_score.weight' has shape (81, 1024) in the checkpoint but (3, 1024) in the model! Skipped.
'roi_heads.box_predictor.cls_score.bias' has shape (81,) in the checkpoint but (3,) in the model! Skipped.
'roi_heads.box_predictor.bbox_pred.weight' has shape (320, 1024) in the checkpoint but (8, 1024) in the model! Skipped.
'roi_heads.box_predictor.bbox_pred.bias' has shape (320,) in the checkpoint but (8,) in the model! Skipped.
'roi_heads.mask_head.predictor.weight' has shape (80, 256, 1, 1) in the checkpoint but (2, 256, 1, 1) in the model! Skipped.
'roi_heads.mask_head.predictor.bias' has shape (80,) in the checkpoint but (2,) in the model! Skipped.
[05/29 10:55:11 d2.engine.train_loop]: Starting training from iteration 0
[05/29 10:55:18 d2.utils.events]:  eta: 0:01:32  iter: 19  total_loss: 1.771  loss_cls: 0.672  loss_box_reg: 0.428  loss_mask: 0.655  loss_rpn_cls: 0.009  loss_rpn_loc: 0.003  time: 0.3300  data_time: 0.0142  lr: 0.000400  max_mem: 1859M
[05/29 10:55:24 d2.utils.events]:  eta: 0:01:24  iter: 39  total_loss: 1.133  loss_cls: 0.267  loss_box_reg: 0.573  loss_mask: 0.293  loss_rpn_cls: 0.004  loss_rpn_loc: 0.003  time: 0.3197  data_time: 0.0059  lr: 0.000799  max_mem: 1859M
[05/29 10:55:31 d2.utils.events]:  eta: 0:01:18  iter: 59  total_loss: 0.843  loss_cls: 0.185  loss_box_reg: 0.451  loss_mask: 0.191  loss_rpn_cls: 0.002  loss_rpn_loc: 0.004  time: 0.3249  data_time: 0.0054  lr: 0.001199  max_mem: 1859M
[05/29 10:55:38 d2.utils.events]:  eta: 0:01:12  iter: 79  total_loss: 0.499  loss_cls: 0.096  loss_box_reg: 0.276  loss_mask: 0.127  loss_rpn_cls: 0.000  loss_rpn_loc: 0.004  time: 0.3261  data_time: 0.0042  lr: 0.001598  max_mem: 1859M
[05/29 10:55:44 d2.utils.events]:  eta: 0:01:05  iter: 99  total_loss: 0.389  loss_cls: 0.063  loss_box_reg: 0.214  loss_mask: 0.106  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3251  data_time: 0.0051  lr: 0.001998  max_mem: 1859M
[05/29 10:55:51 d2.utils.events]:  eta: 0:00:59  iter: 119  total_loss: 0.443  loss_cls: 0.049  loss_box_reg: 0.217  loss_mask: 0.136  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3267  data_time: 0.0044  lr: 0.002398  max_mem: 1859M
[05/29 10:55:58 d2.utils.events]:  eta: 0:00:52  iter: 139  total_loss: 0.444  loss_cls: 0.054  loss_box_reg: 0.251  loss_mask: 0.139  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3282  data_time: 0.0047  lr: 0.002797  max_mem: 1859M
[05/29 10:56:04 d2.utils.events]:  eta: 0:00:46  iter: 159  total_loss: 0.428  loss_cls: 0.051  loss_box_reg: 0.238  loss_mask: 0.123  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3293  data_time: 0.0044  lr: 0.003197  max_mem: 1859M
[05/29 10:56:11 d2.utils.events]:  eta: 0:00:40  iter: 179  total_loss: 0.414  loss_cls: 0.064  loss_box_reg: 0.229  loss_mask: 0.061  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3300  data_time: 0.0047  lr: 0.003596  max_mem: 1859M
[05/29 10:56:18 d2.utils.events]:  eta: 0:00:33  iter: 199  total_loss: 0.394  loss_cls: 0.058  loss_box_reg: 0.227  loss_mask: 0.101  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3311  data_time: 0.0044  lr: 0.003996  max_mem: 1859M
[05/29 10:56:25 d2.utils.events]:  eta: 0:00:26  iter: 219  total_loss: 0.367  loss_cls: 0.057  loss_box_reg: 0.233  loss_mask: 0.058  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3319  data_time: 0.0054  lr: 0.004396  max_mem: 1859M
[05/29 10:56:31 d2.utils.events]:  eta: 0:00:20  iter: 239  total_loss: 0.386  loss_cls: 0.050  loss_box_reg: 0.233  loss_mask: 0.067  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3316  data_time: 0.0055  lr: 0.004795  max_mem: 1859M
[05/29 10:56:38 d2.utils.events]:  eta: 0:00:13  iter: 259  total_loss: 0.332  loss_cls: 0.059  loss_box_reg: 0.193  loss_mask: 0.072  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3320  data_time: 0.0066  lr: 0.005195  max_mem: 1859M
[05/29 10:56:45 d2.utils.events]:  eta: 0:00:06  iter: 279  total_loss: 0.321  loss_cls: 0.047  loss_box_reg: 0.189  loss_mask: 0.068  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3323  data_time: 0.0056  lr: 0.005594  max_mem: 1859M
[05/29 10:56:52 d2.data.datasets.coco]: Loaded 500 images in COCO format from /content/fantastic4v2/datasets/f4/synth_dataset_validation/output/coco_annotations.json
[05/29 10:56:53 d2.data.build]: Distribution of instances among all 2 categories:
|  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|
|  arsenal1  | 246          | emirates1  | 254          |
|            |              |            |              |
|   total    | 500          |            |              |
[05/29 10:56:53 d2.data.common]: Serializing 500 elements to byte tensors and concatenating them all ...
[05/29 10:56:53 d2.data.common]: Serialized dataset takes 0.18 MiB
[05/29 10:56:53 d2.evaluation.evaluator]: Start inference on 500 images
[05/29 10:56:54 d2.evaluation.evaluator]: Inference done 11/500. 0.0835 s / img. ETA=0:00:44
[05/29 10:56:59 d2.evaluation.evaluator]: Inference done 67/500. 0.0833 s / img. ETA=0:00:39
[05/29 10:57:04 d2.evaluation.evaluator]: Inference done 123/500. 0.0833 s / img. ETA=0:00:34
[05/29 10:57:09 d2.evaluation.evaluator]: Inference done 177/500. 0.0840 s / img. ETA=0:00:29
[05/29 10:57:14 d2.evaluation.evaluator]: Inference done 233/500. 0.0838 s / img. ETA=0:00:24
[05/29 10:57:19 d2.evaluation.evaluator]: Inference done 289/500. 0.0838 s / img. ETA=0:00:19
[05/29 10:57:24 d2.evaluation.evaluator]: Inference done 344/500. 0.0838 s / img. ETA=0:00:14
[05/29 10:57:29 d2.evaluation.evaluator]: Inference done 399/500. 0.0838 s / img. ETA=0:00:09
[05/29 10:57:34 d2.evaluation.evaluator]: Inference done 454/500. 0.0838 s / img. ETA=0:00:04
[05/29 10:57:38 d2.evaluation.evaluator]: Total inference time: 0:00:45.147092 (0.091206 s / img per device, on 1 devices)
[05/29 10:57:38 d2.evaluation.evaluator]: Total inference pure compute time: 0:00:41 (0.083866 s / img per device, on 1 devices)
[05/29 10:57:38 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[05/29 10:57:38 d2.evaluation.coco_evaluation]: Saving results to /content/synth_val/coco_instances_results.json
[05/29 10:57:38 d2.evaluation.coco_evaluation]: Evaluating predictions ...
Loading and preparing results...
DONE (t=0.00s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=0.35s).
Accumulating evaluation results...
DONE (t=0.07s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.725
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.986
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.964
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.726
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.771
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.773
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.773
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.773
[05/29 10:57:39 d2.evaluation.coco_evaluation]: Evaluation results for bbox:
|   AP   |  AP50  |  AP75  |  APs  |  APm  |  APl   |
|:------:|:------:|:------:|:-----:|:-----:|:------:|
| 72.472 | 98.632 | 96.376 |  nan  |  nan  | 72.637 |
[05/29 10:57:39 d2.evaluation.coco_evaluation]: Note that some metrics cannot be computed.
[05/29 10:57:39 d2.evaluation.coco_evaluation]: Per-category bbox AP:
| category   | AP     | category   | AP     |
|:-----------|:-------|:-----------|:-------|
| arsenal1   | 68.350 | emirates1  | 76.594 |
Loading and preparing results...
DONE (t=0.05s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *segm*
DONE (t=0.48s).
Accumulating evaluation results...
DONE (t=0.06s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.592
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.986
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.573
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.601
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.663
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.667
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.667
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.667
[05/29 10:57:40 d2.evaluation.coco_evaluation]: Evaluation results for segm:
|   AP   |  AP50  |  AP75  |  APs  |  APm  |  APl   |
|:------:|:------:|:------:|:-----:|:-----:|:------:|
| 59.212 | 98.632 | 57.326 |  nan  |  nan  | 60.085 |
[05/29 10:57:40 d2.evaluation.coco_evaluation]: Note that some metrics cannot be computed.
[05/29 10:57:40 d2.evaluation.coco_evaluation]: Per-category segm AP:
| category   | AP     | category   | AP     |
|:-----------|:-------|:-----------|:-------|
| arsenal1   | 37.781 | emirates1  | 80.642 |
[05/29 10:57:40 d2.engine.defaults]: Evaluation results for synth_val in csv format:
[05/29 10:57:40 d2.evaluation.testing]: copypaste: Task: bbox
[05/29 10:57:40 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[05/29 10:57:40 d2.evaluation.testing]: copypaste: 72.4722,98.6323,96.3760,nan,nan,72.6372
[05/29 10:57:40 d2.evaluation.testing]: copypaste: Task: segm
[05/29 10:57:40 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[05/29 10:57:40 d2.evaluation.testing]: copypaste: 59.2118,98.6323,57.3256,nan,nan,60.0851
[05/29 10:57:40 d2.utils.events]:  eta: 0:00:00  iter: 299  total_loss: 0.332  loss_cls: 0.051  loss_box_reg: 0.197  loss_mask: 0.052  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3328  data_time: 0.0047  lr: 0.005994  max_mem: 1859M
[05/29 10:57:40 d2.engine.hooks]: Overall training speed: 297 iterations in 0:01:39 (0.3340 s / it)
[05/29 10:57:40 d2.engine.hooks]: Total training time: 0:02:27 (0:00:48 on hooks)