!cd fantastic4v2/s01 && python generate_synth_dataset_v3.py --name training   --count 1000 --no-augmentation
!cd fantastic4v2/s01 && python generate_synth_dataset_v3.py --name validation --count 500

[05/29 10:48:30 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=3, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=8, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[05/29 10:48:30 d2.data.datasets.coco]: Loaded 1000 images in COCO format from /content/fantastic4v2/datasets/f4/synth_dataset_training/output/coco_annotations.json
[05/29 10:48:30 d2.data.build]: Removed 0 images with no usable annotations. 1000 images left.
[05/29 10:48:30 d2.data.build]: Distribution of instances among all 2 categories:
|  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|
|  arsenal1  | 505          | emirates1  | 495          |
|            |              |            |              |
|   total    | 1000         |            |              |
[05/29 10:48:30 d2.data.common]: Serializing 1000 elements to byte tensors and concatenating them all ...
[05/29 10:48:30 d2.data.common]: Serialized dataset takes 0.36 MiB
[05/29 10:48:30 d2.data.detection_utils]: TransformGens used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[05/29 10:48:30 d2.data.build]: Using training sampler TrainingSampler
'roi_heads.box_predictor.cls_score.weight' has shape (81, 1024) in the checkpoint but (3, 1024) in the model! Skipped.
'roi_heads.box_predictor.cls_score.bias' has shape (81,) in the checkpoint but (3,) in the model! Skipped.
'roi_heads.box_predictor.bbox_pred.weight' has shape (320, 1024) in the checkpoint but (8, 1024) in the model! Skipped.
'roi_heads.box_predictor.bbox_pred.bias' has shape (320,) in the checkpoint but (8,) in the model! Skipped.
'roi_heads.mask_head.predictor.weight' has shape (80, 256, 1, 1) in the checkpoint but (2, 256, 1, 1) in the model! Skipped.
'roi_heads.mask_head.predictor.bias' has shape (80,) in the checkpoint but (2,) in the model! Skipped.
[05/29 10:48:32 d2.engine.train_loop]: Starting training from iteration 0
[05/29 10:48:38 d2.utils.events]:  eta: 0:01:30  iter: 19  total_loss: 2.032  loss_cls: 0.681  loss_box_reg: 0.642  loss_mask: 0.576  loss_rpn_cls: 0.003  loss_rpn_loc: 0.003  time: 0.3215  data_time: 0.0137  lr: 0.000400  max_mem: 1859M
[05/29 10:48:45 d2.utils.events]:  eta: 0:01:23  iter: 39  total_loss: 1.216  loss_cls: 0.249  loss_box_reg: 0.690  loss_mask: 0.283  loss_rpn_cls: 0.003  loss_rpn_loc: 0.003  time: 0.3233  data_time: 0.0046  lr: 0.000799  max_mem: 1859M
[05/29 10:48:51 d2.utils.events]:  eta: 0:01:17  iter: 59  total_loss: 0.613  loss_cls: 0.072  loss_box_reg: 0.367  loss_mask: 0.164  loss_rpn_cls: 0.001  loss_rpn_loc: 0.004  time: 0.3228  data_time: 0.0050  lr: 0.001199  max_mem: 1859M
[05/29 10:48:58 d2.utils.events]:  eta: 0:01:11  iter: 79  total_loss: 0.477  loss_cls: 0.058  loss_box_reg: 0.298  loss_mask: 0.104  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.3256  data_time: 0.0045  lr: 0.001598  max_mem: 1859M
[05/29 10:49:05 d2.utils.events]:  eta: 0:01:05  iter: 99  total_loss: 0.352  loss_cls: 0.045  loss_box_reg: 0.211  loss_mask: 0.098  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3287  data_time: 0.0048  lr: 0.001998  max_mem: 1859M
[05/29 10:49:12 d2.utils.events]:  eta: 0:00:59  iter: 119  total_loss: 0.272  loss_cls: 0.042  loss_box_reg: 0.159  loss_mask: 0.072  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3296  data_time: 0.0043  lr: 0.002398  max_mem: 1859M
[05/29 10:49:18 d2.utils.events]:  eta: 0:00:53  iter: 139  total_loss: 0.245  loss_cls: 0.036  loss_box_reg: 0.153  loss_mask: 0.040  loss_rpn_cls: 0.000  loss_rpn_loc: 0.001  time: 0.3312  data_time: 0.0043  lr: 0.002797  max_mem: 1859M
[05/29 10:49:25 d2.utils.events]:  eta: 0:00:47  iter: 159  total_loss: 0.224  loss_cls: 0.033  loss_box_reg: 0.137  loss_mask: 0.038  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3331  data_time: 0.0043  lr: 0.003197  max_mem: 1859M
[05/29 10:49:32 d2.utils.events]:  eta: 0:00:40  iter: 179  total_loss: 0.218  loss_cls: 0.034  loss_box_reg: 0.137  loss_mask: 0.033  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3351  data_time: 0.0041  lr: 0.003596  max_mem: 1859M
[05/29 10:49:39 d2.utils.events]:  eta: 0:00:34  iter: 199  total_loss: 0.252  loss_cls: 0.028  loss_box_reg: 0.177  loss_mask: 0.031  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3361  data_time: 0.0048  lr: 0.003996  max_mem: 1859M
[05/29 10:49:46 d2.utils.events]:  eta: 0:00:27  iter: 219  total_loss: 0.242  loss_cls: 0.031  loss_box_reg: 0.182  loss_mask: 0.028  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3365  data_time: 0.0062  lr: 0.004396  max_mem: 1860M
[05/29 10:49:53 d2.utils.events]:  eta: 0:00:20  iter: 239  total_loss: 0.238  loss_cls: 0.033  loss_box_reg: 0.154  loss_mask: 0.039  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3376  data_time: 0.0050  lr: 0.004795  max_mem: 1860M
[05/29 10:50:00 d2.utils.events]:  eta: 0:00:13  iter: 259  total_loss: 0.210  loss_cls: 0.027  loss_box_reg: 0.147  loss_mask: 0.024  loss_rpn_cls: 0.000  loss_rpn_loc: 0.001  time: 0.3382  data_time: 0.0040  lr: 0.005195  max_mem: 1860M
[05/29 10:50:07 d2.utils.events]:  eta: 0:00:07  iter: 279  total_loss: 0.199  loss_cls: 0.028  loss_box_reg: 0.132  loss_mask: 0.026  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3393  data_time: 0.0047  lr: 0.005594  max_mem: 1860M
[05/29 10:50:15 d2.data.datasets.coco]: Loaded 500 images in COCO format from /content/fantastic4v2/datasets/f4/synth_dataset_validation/output/coco_annotations.json
[05/29 10:50:15 d2.data.build]: Distribution of instances among all 2 categories:
|  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|
|  arsenal1  | 258          | emirates1  | 242          |
|            |              |            |              |
|   total    | 500          |            |              |
[05/29 10:50:15 d2.data.common]: Serializing 500 elements to byte tensors and concatenating them all ...
[05/29 10:50:15 d2.data.common]: Serialized dataset takes 0.18 MiB
[05/29 10:50:15 d2.evaluation.evaluator]: Start inference on 500 images
[05/29 10:50:16 d2.evaluation.evaluator]: Inference done 11/500. 0.0817 s / img. ETA=0:00:41
[05/29 10:50:21 d2.evaluation.evaluator]: Inference done 71/500. 0.0817 s / img. ETA=0:00:36
[05/29 10:50:27 d2.evaluation.evaluator]: Inference done 131/500. 0.0819 s / img. ETA=0:00:31
[05/29 10:50:32 d2.evaluation.evaluator]: Inference done 190/500. 0.0820 s / img. ETA=0:00:26
[05/29 10:50:37 d2.evaluation.evaluator]: Inference done 249/500. 0.0821 s / img. ETA=0:00:21
[05/29 10:50:42 d2.evaluation.evaluator]: Inference done 308/500. 0.0822 s / img. ETA=0:00:16
[05/29 10:50:47 d2.evaluation.evaluator]: Inference done 367/500. 0.0822 s / img. ETA=0:00:11
[05/29 10:50:52 d2.evaluation.evaluator]: Inference done 424/500. 0.0826 s / img. ETA=0:00:06
[05/29 10:50:57 d2.evaluation.evaluator]: Inference done 483/500. 0.0827 s / img. ETA=0:00:01
[05/29 10:50:58 d2.evaluation.evaluator]: Total inference time: 0:00:42.309591 (0.085474 s / img per device, on 1 devices)
[05/29 10:50:58 d2.evaluation.evaluator]: Total inference pure compute time: 0:00:40 (0.082672 s / img per device, on 1 devices)
[05/29 10:50:58 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[05/29 10:50:58 d2.evaluation.coco_evaluation]: Saving results to /content/synth_val/coco_instances_results.json
[05/29 10:50:58 d2.evaluation.coco_evaluation]: Evaluating predictions ...
Loading and preparing results...
DONE (t=0.00s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=0.18s).
Accumulating evaluation results...
DONE (t=0.05s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.366
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.719
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.365
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.390
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.371
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.454
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.460
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.460
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.466
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.464
[05/29 10:50:58 d2.evaluation.coco_evaluation]: Evaluation results for bbox:
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 36.644 | 71.920 | 36.503 |  nan  | 38.972 | 37.067 |
[05/29 10:50:58 d2.evaluation.coco_evaluation]: Note that some metrics cannot be computed.
[05/29 10:50:58 d2.evaluation.coco_evaluation]: Per-category bbox AP:
| category   | AP     | category   | AP     |
|:-----------|:-------|:-----------|:-------|
| arsenal1   | 16.372 | emirates1  | 56.916 |
Loading and preparing results...
DONE (t=0.01s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *segm*
DONE (t=0.24s).
Accumulating evaluation results...
DONE (t=0.04s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.484
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.833
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.387
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.476
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.487
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.557
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.562
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.562
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.558
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.561
[05/29 10:50:59 d2.evaluation.coco_evaluation]: Evaluation results for segm:
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 48.364 | 83.279 | 38.656 |  nan  | 47.580 | 48.705 |
[05/29 10:50:59 d2.evaluation.coco_evaluation]: Note that some metrics cannot be computed.
[05/29 10:50:59 d2.evaluation.coco_evaluation]: Per-category segm AP:
| category   | AP     | category   | AP     |
|:-----------|:-------|:-----------|:-------|
| arsenal1   | 43.540 | emirates1  | 53.188 |
[05/29 10:50:59 d2.engine.defaults]: Evaluation results for synth_val in csv format:
[05/29 10:50:59 d2.evaluation.testing]: copypaste: Task: bbox
[05/29 10:50:59 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[05/29 10:50:59 d2.evaluation.testing]: copypaste: 36.6444,71.9201,36.5026,nan,38.9723,37.0670
[05/29 10:50:59 d2.evaluation.testing]: copypaste: Task: segm
[05/29 10:50:59 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[05/29 10:50:59 d2.evaluation.testing]: copypaste: 48.3637,83.2790,38.6555,nan,47.5803,48.7047
[05/29 10:50:59 d2.utils.events]:  eta: 0:00:00  iter: 299  total_loss: 0.197  loss_cls: 0.028  loss_box_reg: 0.130  loss_mask: 0.024  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.3406  data_time: 0.0046  lr: 0.005994  max_mem: 1860M
[05/29 10:50:59 d2.engine.hooks]: Overall training speed: 297 iterations in 0:01:41 (0.3418 s / it)
[05/29 10:50:59 d2.engine.hooks]: Total training time: 0:02:26 (0:00:44 on hooks)