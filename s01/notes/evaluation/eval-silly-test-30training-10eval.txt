!cd fantastic4v2/s01 && python generate_synth_dataset_v3.py --name training   --count 30 --no-augmentation
!cd fantastic4v2/s01 && python generate_synth_dataset_v3.py --name validation --count 10

[06/01 07:48:37 d2.engine.defaults]: Model:
GeneralizedRCNN(
  (backbone): FPN(
    (fpn_lateral2): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelMaxPool()
    (bottom_up): ResNet(
      (stem): BasicStem(
        (conv1): Conv2d(
          3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv1): Conv2d(
            64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv2): Conv2d(
            64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
          )
          (conv3): Conv2d(
            64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv1): Conv2d(
            256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv2): Conv2d(
            128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
          )
          (conv3): Conv2d(
            128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
          (conv1): Conv2d(
            512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (3): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (4): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
        (5): BottleneckBlock(
          (conv1): Conv2d(
            1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv2): Conv2d(
            256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
          )
          (conv3): Conv2d(
            256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
          )
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(
            1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
          (conv1): Conv2d(
            1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (1): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
        (2): BottleneckBlock(
          (conv1): Conv2d(
            2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv2): Conv2d(
            512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
          )
          (conv3): Conv2d(
            512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): FrozenBatchNorm2d(num_features=2048, eps=1e-05)
          )
        )
      )
    )
  )
  (proposal_generator): RPN(
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (objectness_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): StandardROIHeads(
    (box_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(7, 7), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(7, 7), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(7, 7), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(7, 7), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (box_head): FastRCNNConvFCHead(
      (fc1): Linear(in_features=12544, out_features=1024, bias=True)
      (fc2): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=1024, out_features=3, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=8, bias=True)
    )
    (mask_pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.25, sampling_ratio=0, aligned=True)
        (1): ROIAlign(output_size=(14, 14), spatial_scale=0.125, sampling_ratio=0, aligned=True)
        (2): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
        (3): ROIAlign(output_size=(14, 14), spatial_scale=0.03125, sampling_ratio=0, aligned=True)
      )
    )
    (mask_head): MaskRCNNConvUpsampleHead(
      (mask_fcn1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (mask_fcn4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (deconv): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2))
      (predictor): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[06/01 07:48:37 d2.data.datasets.coco]: Loaded 30 images in COCO format from /content/fantastic4v2/datasets/f4/synth_dataset_training/output/coco_annotations.json
[06/01 07:48:37 d2.data.build]: Removed 0 images with no usable annotations. 30 images left.
[06/01 07:48:37 d2.data.build]: Distribution of instances among all 2 categories:
|  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|
|  arsenal1  | 14           | emirates1  | 16           |
|            |              |            |              |
|   total    | 30           |            |              |
[06/01 07:48:37 d2.data.common]: Serializing 30 elements to byte tensors and concatenating them all ...
[06/01 07:48:37 d2.data.common]: Serialized dataset takes 0.01 MiB
[06/01 07:48:37 d2.data.detection_utils]: TransformGens used in training: [ResizeShortestEdge(short_edge_length=(640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[06/01 07:48:37 d2.data.build]: Using training sampler TrainingSampler
model_final_f10217.pkl: 178MB [00:18, 9.64MB/s]
Unable to load 'roi_heads.box_predictor.cls_score.weight' to the model due to incompatible shapes: (81, 1024) in the checkpoint but (3, 1024) in the model!
Unable to load 'roi_heads.box_predictor.cls_score.bias' to the model due to incompatible shapes: (81,) in the checkpoint but (3,) in the model!
Unable to load 'roi_heads.box_predictor.bbox_pred.weight' to the model due to incompatible shapes: (320, 1024) in the checkpoint but (8, 1024) in the model!
Unable to load 'roi_heads.box_predictor.bbox_pred.bias' to the model due to incompatible shapes: (320,) in the checkpoint but (8,) in the model!
Unable to load 'roi_heads.mask_head.predictor.weight' to the model due to incompatible shapes: (80, 256, 1, 1) in the checkpoint but (2, 256, 1, 1) in the model!
Unable to load 'roi_heads.mask_head.predictor.bias' to the model due to incompatible shapes: (80,) in the checkpoint but (2,) in the model!
[06/01 07:49:04 d2.engine.train_loop]: Starting training from iteration 0
[06/01 07:49:09 d2.utils.events]:  eta: 0:01:02  iter: 19  total_loss: 1.981  loss_cls: 0.693  loss_box_reg: 0.718  loss_mask: 0.583  loss_rpn_cls: 0.002  loss_rpn_loc: 0.003  time: 0.2217  data_time: 0.0132  lr: 0.000400  max_mem: 1857M
[06/01 07:49:13 d2.utils.events]:  eta: 0:00:58  iter: 39  total_loss: 1.175  loss_cls: 0.255  loss_box_reg: 0.687  loss_mask: 0.249  loss_rpn_cls: 0.002  loss_rpn_loc: 0.003  time: 0.2227  data_time: 0.0047  lr: 0.000799  max_mem: 1857M
[06/01 07:49:18 d2.utils.events]:  eta: 0:00:54  iter: 59  total_loss: 0.575  loss_cls: 0.075  loss_box_reg: 0.339  loss_mask: 0.089  loss_rpn_cls: 0.001  loss_rpn_loc: 0.004  time: 0.2248  data_time: 0.0047  lr: 0.001199  max_mem: 1857M
[06/01 07:49:22 d2.utils.events]:  eta: 0:00:49  iter: 79  total_loss: 0.332  loss_cls: 0.038  loss_box_reg: 0.204  loss_mask: 0.071  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.2239  data_time: 0.0055  lr: 0.001598  max_mem: 1857M
[06/01 07:49:27 d2.utils.events]:  eta: 0:00:45  iter: 99  total_loss: 0.311  loss_cls: 0.047  loss_box_reg: 0.196  loss_mask: 0.067  loss_rpn_cls: 0.000  loss_rpn_loc: 0.003  time: 0.2255  data_time: 0.0051  lr: 0.001998  max_mem: 1857M
[06/01 07:49:32 d2.utils.events]:  eta: 0:00:41  iter: 119  total_loss: 0.251  loss_cls: 0.045  loss_box_reg: 0.140  loss_mask: 0.038  loss_rpn_cls: 0.000  loss_rpn_loc: 0.001  time: 0.2260  data_time: 0.0048  lr: 0.002398  max_mem: 1857M
[06/01 07:49:36 d2.utils.events]:  eta: 0:00:36  iter: 139  total_loss: 0.215  loss_cls: 0.029  loss_box_reg: 0.133  loss_mask: 0.041  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.2260  data_time: 0.0041  lr: 0.002797  max_mem: 1857M
[06/01 07:49:41 d2.utils.events]:  eta: 0:00:32  iter: 159  total_loss: 0.237  loss_cls: 0.030  loss_box_reg: 0.154  loss_mask: 0.030  loss_rpn_cls: 0.000  loss_rpn_loc: 0.001  time: 0.2258  data_time: 0.0045  lr: 0.003197  max_mem: 1857M
[06/01 07:49:45 d2.utils.events]:  eta: 0:00:27  iter: 179  total_loss: 0.275  loss_cls: 0.037  loss_box_reg: 0.206  loss_mask: 0.024  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.2259  data_time: 0.0043  lr: 0.003596  max_mem: 1857M
[06/01 07:49:50 d2.utils.events]:  eta: 0:00:22  iter: 199  total_loss: 0.200  loss_cls: 0.034  loss_box_reg: 0.134  loss_mask: 0.024  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.2261  data_time: 0.0047  lr: 0.003996  max_mem: 1857M
[06/01 07:49:54 d2.utils.events]:  eta: 0:00:18  iter: 219  total_loss: 0.182  loss_cls: 0.023  loss_box_reg: 0.139  loss_mask: 0.024  loss_rpn_cls: 0.000  loss_rpn_loc: 0.002  time: 0.2263  data_time: 0.0055  lr: 0.004396  max_mem: 1857M
[06/01 07:49:59 d2.utils.events]:  eta: 0:00:13  iter: 239  total_loss: 0.198  loss_cls: 0.027  loss_box_reg: 0.140  loss_mask: 0.024  loss_rpn_cls: 0.000  loss_rpn_loc: 0.001  time: 0.2254  data_time: 0.0043  lr: 0.004795  max_mem: 1857M
[06/01 07:50:03 d2.utils.events]:  eta: 0:00:09  iter: 259  total_loss: 0.177  loss_cls: 0.023  loss_box_reg: 0.108  loss_mask: 0.027  loss_rpn_cls: 0.000  loss_rpn_loc: 0.001  time: 0.2252  data_time: 0.0044  lr: 0.005195  max_mem: 1857M
[06/01 07:50:07 d2.utils.events]:  eta: 0:00:04  iter: 279  total_loss: 0.182  loss_cls: 0.026  loss_box_reg: 0.138  loss_mask: 0.018  loss_rpn_cls: 0.000  loss_rpn_loc: 0.001  time: 0.2247  data_time: 0.0042  lr: 0.005594  max_mem: 1857M
[06/01 07:50:13 d2.data.datasets.coco]: Loaded 10 images in COCO format from /content/fantastic4v2/datasets/f4/synth_dataset_validation/output/coco_annotations.json
[06/01 07:50:13 d2.data.build]: Distribution of instances among all 2 categories:
|  category  | #instances   |  category  | #instances   |
|:----------:|:-------------|:----------:|:-------------|
|  arsenal1  | 6            | emirates1  | 4            |
|            |              |            |              |
|   total    | 10           |            |              |
[06/01 07:50:13 d2.data.common]: Serializing 10 elements to byte tensors and concatenating them all ...
[06/01 07:50:13 d2.data.common]: Serialized dataset takes 0.00 MiB
[06/01 07:50:13 d2.evaluation.evaluator]: Start inference on 10 images
[06/01 07:50:13 d2.evaluation.evaluator]: Total inference time: 0:00:00.328363 (0.065673 s / img per device, on 1 devices)
[06/01 07:50:13 d2.evaluation.evaluator]: Total inference pure compute time: 0:00:00 (0.055050 s / img per device, on 1 devices)
[06/01 07:50:13 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[06/01 07:50:13 d2.evaluation.coco_evaluation]: Saving results to /content/synth_val/coco_instances_results.json
[06/01 07:50:13 d2.evaluation.coco_evaluation]: Evaluating predictions ...
Loading and preparing results...
DONE (t=0.00s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *bbox*
DONE (t=0.01s).
Accumulating evaluation results...
DONE (t=0.01s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.551
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.830
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.564
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.701
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.576
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.629
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.629
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.629
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.700
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.600
[06/01 07:50:13 d2.evaluation.coco_evaluation]: Evaluation results for bbox:
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 55.099 | 82.992 | 56.436 |  nan  | 70.099 | 57.574 |
[06/01 07:50:13 d2.evaluation.coco_evaluation]: Note that some metrics cannot be computed.
[06/01 07:50:14 d2.evaluation.coco_evaluation]: Per-category bbox AP:
| category   | AP     | category   | AP     |
|:-----------|:-------|:-----------|:-------|
| arsenal1   | 32.525 | emirates1  | 77.673 |
Loading and preparing results...
DONE (t=0.00s)
creating index...
index created!
Running per image evaluation...
Evaluate annotation type *segm*
DONE (t=0.01s).
Accumulating evaluation results...
DONE (t=0.01s).
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.555
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.914
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.522
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.651
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.593
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.617
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.617
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.617
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.650
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.613
[06/01 07:50:14 d2.evaluation.coco_evaluation]: Evaluation results for segm:
|   AP   |  AP50  |  AP75  |  APs  |  APm   |  APl   |
|:------:|:------:|:------:|:-----:|:------:|:------:|
| 55.482 | 91.407 | 52.228 |  nan  | 65.099 | 59.332 |
[06/01 07:50:14 d2.evaluation.coco_evaluation]: Note that some metrics cannot be computed.
[06/01 07:50:14 d2.evaluation.coco_evaluation]: Per-category segm AP:
| category   | AP     | category   | AP     |
|:-----------|:-------|:-----------|:-------|
| arsenal1   | 41.245 | emirates1  | 69.719 |
[06/01 07:50:14 d2.engine.defaults]: Evaluation results for synth_val in csv format:
[06/01 07:50:14 d2.evaluation.testing]: copypaste: Task: bbox
[06/01 07:50:14 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[06/01 07:50:14 d2.evaluation.testing]: copypaste: 55.0990,82.9915,56.4356,nan,70.0990,57.5743
[06/01 07:50:14 d2.evaluation.testing]: copypaste: Task: segm
[06/01 07:50:14 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[06/01 07:50:14 d2.evaluation.testing]: copypaste: 55.4821,91.4074,52.2277,nan,65.0990,59.3317
[06/01 07:50:14 d2.utils.events]:  eta: 0:00:00  iter: 299  total_loss: 0.189  loss_cls: 0.028  loss_box_reg: 0.124  loss_mask: 0.026  loss_rpn_cls: 0.000  loss_rpn_loc: 0.001  time: 0.2246  data_time: 0.0056  lr: 0.005994  max_mem: 1857M
[06/01 07:50:14 d2.engine.hooks]: Overall training speed: 297 iterations in 0:01:06 (0.2254 s / it)
[06/01 07:50:14 d2.engine.hooks]: Total training time: 0:01:08 (0:00:01 on hooks)